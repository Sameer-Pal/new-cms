"use client";
// import React, { useState } from "react";
import "./Calender.css";
// new 
import FullCalendar from '@fullcalendar/react'
import dayGridPlugin from '@fullcalendar/daygrid'
import interactionPlugin, { Draggable } from '@fullcalendar/interaction'
import timeGridPlugin from '@fullcalendar/timegrid'
import { Fragment, useEffect, useState } from 'react'
import { Dialog, Transition } from '@headlessui/react'
import { CheckIcon, ExclamationTriangleIcon } from '@heroicons/react/20/solid'


const statuses = [
  "Compiled",
  "Pending",
  "PendingRejected",
  "Future",
  "Checklist Compiled",
  "Checklist Pending",
];

const Calendar = () => {
  // const [events, setEvents] = useState({});
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState([]);
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [customYear, setCustomYear] = useState(new Date().getFullYear());
  const [customMonth, setCustomMonth] = useState(new Date().getMonth() + 1);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const [events, setEvents] = useState([
    { title: 'event 1', id: '1' },
    { title: 'event 2', id: '2' },
    { title: 'event 3', id: '3' },
    { title: 'event 4', id: '4' },
    { title: 'event 5', id: '5' },
  ])
  const [allEvents, setAllEvents] = useState([])
  const [showModal, setShowModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [idToDelete, setIdToDelete] = useState(null)
  const [newEvent, setNewEvent] = useState({
    title: '',
    start: '',
    allDay: false,
    id: 0
  })

  useEffect(() => {
    let draggableEl = document.getElementById('draggable-el')
    if (draggableEl) {
      new Draggable(draggableEl, {
        itemSelector: ".fc-event",
        eventData: function (eventEl) {
          let title = eventEl.getAttribute("title")
          let id = eventEl.getAttribute("data")
          let start = eventEl.getAttribute("start")
          return { title, id, start }
        }
      })
    }
  }, [])


  function handleDateClick(arg) {
    setNewEvent({ ...newEvent, start: arg.date, allDay: arg.allDay, id: new Date().getTime() })
    setShowModal(true)
  }

  function addEvent(data) {
    const event = { ...newEvent, start: data.date.toISOString(), title: data.draggedEl.innerText, allDay: data.allDay, id: new Date().getTime() }
    setAllEvents([...allEvents, event])
  }

  function handleDeleteModal(data) {
    setShowDeleteModal(true)
    setIdToDelete(Number(data.event.id))
  }

  function handleDelete() {
    setAllEvents(allEvents.filter(event => Number(event.id) !== Number(idToDelete)))
    setShowDeleteModal(false)
    setIdToDelete(null)
  }

  function handleCloseModal() {
    setShowModal(false)
    setNewEvent({
      title: '',
      start: '',
      allDay: false,
      id: 0
    })
    setShowDeleteModal(false)
    setIdToDelete(null)
  }

  const handleChange = (e) => {
    setNewEvent({
      ...newEvent,
      title: e.target.value
    })
  }

  function handleSubmit(e) {
    e.preventDefault()
    setAllEvents([...allEvents, newEvent])
    setShowModal(false)
    setNewEvent({
      title: '',
      start: '',
      allDay: false,
      id: 0
    })
  }






  // const daysInMonth = (month, year) => new Date(year, month, 0).getDate();

  // const handlePreviousMonth = () => {
  //   if (currentMonth === 0) {
  //     setCurrentMonth(11);
  //     setCurrentYear(currentYear - 1);
  //   } else {
  //     setCurrentMonth(currentMonth - 1);
  //   }
  // };

  // const handleNextMonth = () => {
  //   if (currentMonth === 11) {
  //     setCurrentMonth(0);
  //     setCurrentYear(currentYear + 1);
  //   } else {
  //     setCurrentMonth(currentMonth + 1);
  //   }
  // };

  // const days = Array.from(
  //   { length: daysInMonth(currentMonth + 1, currentYear) },
  //   (_, i) => i + 1
  // );

  // const addEvent = () => {
  //   if (selectedDate) {
  //     setEvents((prevEvents) => ({
  //       ...prevEvents,
  //       [`${currentYear}-${currentMonth + 1}-${selectedDate}`]: selectedStatus,
  //     }));
  //     setSelectedDate(null);
  //     setSelectedStatus([]);
  //     setIsModalOpen(false); // Close modal after adding event
  //   }
  // };

  // const handleCustomMonthChange = (e) => {
  //   setCustomMonth(parseInt(e.target.value, 10) - 1);
  // };

  // const handleCustomYearChange = (e) => {
  //   setCustomYear(parseInt(e.target.value, 10));
  // };

  // const applyCustomDate = () => {
  //   setCurrentYear(customYear);
  //   setCurrentMonth(customMonth);
  // };

  // const toggleStatus = (status) => {
  //   setSelectedStatus((prevStatuses) =>
  //     prevStatuses.includes(status)
  //       ? prevStatuses.filter((s) => s !== status)
  //       : [...prevStatuses, status]
  //   );
  // };

  // const handleDateClick = (day) => {
  //   setSelectedDate(day);
  //   setIsModalOpen(true); // Open modal on date click
  // };

  // const closeModal = () => {
  //   setIsModalOpen(false); // Close modal when needed
  //   setSelectedDate(null);
  //   setSelectedStatus([]);
  // };

  return (
    <>
    <nav className="flex justify-between mb-12 border-b border-violet-100 p-4">
      <h1 className="font-bold text-2xl text-gray-700">Calendar</h1>
    </nav>
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <div className="grid grid-cols-10">
        <div className="col-span-8">
          <FullCalendar
            plugins={[
              dayGridPlugin,
              interactionPlugin,
              timeGridPlugin
            ]}
            headerToolbar={{
              left: 'prev,next today',
              center: 'title',
              right: 'resourceTimelineWook, dayGridMonth,timeGridWeek'
            }}
            events={allEvents}
            nowIndicator={true}
            editable={true}
            droppable={true}
            selectable={true}
            selectMirror={true}
            dateClick={handleDateClick}
            drop={(data) => addEvent(data)}
            eventClick={(data) => handleDeleteModal(data)}
          />
        </div>
        <div id="draggable-el" className="ml-8 w-full border-2 p-2 rounded-md mt-16 lg:h-1/2 bg-violet-50">
          <h1 className="font-bold text-lg text-center">Drag Event</h1>
          {events.map(event => (
            <div
              className="fc-event border-2 p-1 m-2 w-full rounded-md ml-auto text-center bg-white"
              title={event.title}
              key={event.id}
            >
              {event.title}
            </div>
          ))}
        </div>
      </div>

      <Transition.Root show={showDeleteModal} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={setShowDeleteModal}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
          </Transition.Child>

          <div className="fixed inset-0 z-10 overflow-y-auto">
            <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                enterTo="opacity-100 translate-y-0 sm:scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              >
                <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                  <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div className="sm:flex sm:items-start">
                      <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <ExclamationTriangleIcon className="h-6 w-6 text-red-600" aria-hidden="true" />
                      </div>
                      <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                        <Dialog.Title as="h3" className="text-base font-semibold leading-6 text-gray-900">
                          Delete Event
                        </Dialog.Title>
                        <div className="mt-2">
                          <p className="text-sm text-gray-500">
                            Are you sure you want to delete this event?
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                    <button type="button" className="inline-flex w-full justify-center rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 sm:ml-3 sm:w-auto" onClick={handleDelete}>
                      Delete
                    </button>
                    <button type="button" className="mt-3 inline-flex w-full justify-center rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto"
                      onClick={handleCloseModal}
                    >
                      Cancel
                    </button>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition.Root>
      <Transition.Root show={showModal} as={Fragment}>
        <Dialog as="div" className="relative z-10" onClose={setShowModal}>
          <Transition.Child
            as={Fragment}
            enter="ease-out duration-300"
            enterFrom="opacity-0"
            enterTo="opacity-100"
            leave="ease-in duration-200"
            leaveFrom="opacity-100"
            leaveTo="opacity-0"
          >
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
          </Transition.Child>

          <div className="fixed inset-0 z-10 overflow-y-auto">
            <div className="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
              <Transition.Child
                as={Fragment}
                enter="ease-out duration-300"
                enterFrom="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                enterTo="opacity-100 translate-y-0 sm:scale-100"
                leave="ease-in duration-200"
                leaveFrom="opacity-100 translate-y-0 sm:scale-100"
                leaveTo="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
              >
                <Dialog.Panel className="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg">
                  <div className="bg-white px-4 pb-4 pt-5 sm:p-6 sm:pb-4">
                    <div className="sm:flex sm:items-start">
                      <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-violet-100 sm:mx-0 sm:h-10 sm:w-10">
                        <CheckIcon className="h-6 w-6 text-violet-600" aria-hidden="true" />
                      </div>
                      <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                        <Dialog.Title as="h3" className="text-base font-semibold leading-6 text-gray-900">
                          Add Event
                        </Dialog.Title>
                        <div className="mt-2">
                          <form onSubmit={handleSubmit}>
                            <input type="text" value={newEvent.title} onChange={handleChange} placeholder="Event Title" className="mt-4 w-full px-4 py-2 text-lg" />
                            <div className="mt-4 flex justify-between items-center">
                              <button type="button" className="bg-gray-100 px-4 py-2 text-gray-700 rounded-md hover:bg-gray-200" onClick={handleCloseModal}>
                                Cancel
                              </button>
                              <button type="submit" className="bg-violet-600 px-4 py-2 text-white rounded-md hover:bg-violet-500">
                                Add Event
                              </button>
                            </div>
                          </form>
                        </div>
                      </div>
                    </div>
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </div>
        </Dialog>
      </Transition.Root>
    </main>
  </>
  );
};

export default Calendar;








"use client";
import React, { useState } from "react";
import "./Calender.css";

const statuses = [
  "Compiled",
  "Pending",
  "PendingRejected",
  "Future",
  "Checklist Compiled",
  "Checklist Pending",
];

const Calendar = () => {
  const [events, setEvents] = useState({});
  const [selectedDate, setSelectedDate] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState([]);
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [customYear, setCustomYear] = useState(new Date().getFullYear());
  const [customMonth, setCustomMonth] = useState(new Date().getMonth() + 1);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const daysInMonth = (month, year) => new Date(year, month, 0).getDate();

  const handlePreviousMonth = () => {
    if (currentMonth === 0) {
      setCurrentMonth(11);
      setCurrentYear(currentYear - 1);
    } else {
      setCurrentMonth(currentMonth - 1);
    }
  };

  const handleNextMonth = () => {
    if (currentMonth === 11) {
      setCurrentMonth(0);
      setCurrentYear(currentYear + 1);
    } else {
      setCurrentMonth(currentMonth + 1);
    }
  };

  const days = Array.from(
    { length: daysInMonth(currentMonth + 1, currentYear) },
    (_, i) => i + 1
  );

  const addEvent = () => {
    if (selectedDate) {
      setEvents((prevEvents) => ({
        ...prevEvents,
        [`${currentYear}-${currentMonth + 1}-${selectedDate}`]: selectedStatus,
      }));
      setSelectedDate(null);
      setSelectedStatus([]);
      setIsModalOpen(false); // Close modal after adding event
    }
  };

  const handleCustomMonthChange = (e) => {
    setCustomMonth(parseInt(e.target.value, 10) - 1);
  };

  const handleCustomYearChange = (e) => {
    setCustomYear(parseInt(e.target.value, 10));
  };

  const applyCustomDate = () => {
    setCurrentYear(customYear);
    setCurrentMonth(customMonth);
  };

  const toggleStatus = (status) => {
    setSelectedStatus((prevStatuses) =>
      prevStatuses.includes(status)
        ? prevStatuses.filter((s) => s !== status)
        : [...prevStatuses, status]
    );
  };

  const handleDateClick = (day) => {
    setSelectedDate(day);
    setIsModalOpen(true); // Open modal on date click
  };

  const closeModal = () => {
    setIsModalOpen(false); // Close modal when needed
    setSelectedDate(null);
    setSelectedStatus([]);
  };

  return (
    <div className="calendar-container">
      <div className="calendar-header">
        <button className="nav-button" onClick={handlePreviousMonth}>
          Prev
        </button>
        <h1 className="calendar-title">{`${new Date(
          currentYear,
          currentMonth
        ).toLocaleString("default", { month: "long" })} ${currentYear}`}</h1>
        <button className="nav-button" onClick={handleNextMonth}>
          Next
        </button>
      </div>

      <div className="status-icons-container">
        {statuses.map((status) => (
          <div key={status} className="status-icon-wrapper">
            <i
              className={`status-icon icon-${status
                .replace(/\s+/g, "-")
                .toLowerCase()}`}
            />
            <span className="status-label">{status}</span>
          </div>
        ))}
      </div>

      <div className="custom-date-inputs">
        <input
          type="number"
          className="custom-date-input"
          value={customMonth + 1}
          onChange={handleCustomMonthChange}
          min="1"
          max="12"
        />
        <input
          type="number"
          className="custom-date-input"
          value={customYear}
          onChange={handleCustomYearChange}
        />
        <button className="apply-date-button" onClick={applyCustomDate}>
          Apply
        </button>
      </div>

      <div className="calendar-grid">
        {days.map((day) => (
          <div
            key={day}
            className={`calendar-day ${events[`${currentYear}-${currentMonth + 1}-${day}`] ? "event" : ""}`}
            onClick={() => handleDateClick(day)}
          >
            <span className="day-number">{day}</span>
            {events[`${currentYear}-${currentMonth + 1}-${day}`] && (
              <div className="event-status-container">
                {events[`${currentYear}-${currentMonth + 1}-${day}`].map(
                  (status) => (
                    <a
                      key={status}
                      href={"/"}
                      className={`event-status-icon ${status
                        .replace(/\s+/g, "-")
                        .toLowerCase()}`}
                    >
                      <i
                        className={`status-icon icon-${status
                          .replace(/\s+/g, "-")
                          .toLowerCase()}`}
                      />
                    </a>
                  )
                )}
              </div>
            )}
          </div>
        ))}
      </div>
      {isModalOpen && (
        <div className="modal-overlay">
          <div className="event-form bg-black p-8 rounded-3xl shadow-lg max-w-lg mx-auto mt-8 relative">
            <button className="close-button" onClick={closeModal}>✖</button>
            <h2 className="event-form-title text-4xl font-bold text-white mb-6 text-center transition-transform duration-200 hover:text-gray-300 hover:scale-101 hover:bold">  
                          Add Event for {`${selectedDate}/${currentMonth + 1}/${currentYear}`}
            </h2>
            <div className="status-selector grid grid-cols-2 gap-4 mb-6">
              {statuses.map((status) => (
                <label
                  key={status}
                  className="status-option flex items-center space-x-3 bg-gray-800 p-2 rounded-lg shadow-sm transform transition-transform duration-200 hover:scale-105" // Add Tailwind classes here
                  >
                  <input
                    type="checkbox"
                    checked={selectedStatus.includes(status)}
                    onChange={() => toggleStatus(status)}
                    className="form-checkbox h-6 w-6 text-white border-white rounded focus:ring-2 focus:ring-white"
                    />
                  <span className="text-white font-medium">{status}</span>
                </label>
              ))}
            </div>
            <button
              className="add-event-button w-full bg-gray-700 text-white font-semibold py-3 rounded-xl focus:ring-white  transform transition-transform duration-200 hover:scale-102"
              onClick={addEvent}
            >
              Add Event
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default Calendar;